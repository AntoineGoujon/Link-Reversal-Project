# -*- generated by 1.0.13 -*-
import da
PatternExpr_192 = da.pat.TuplePattern([da.pat.ConstantPattern('HEIGHT'), da.pat.FreePattern('height')])
PatternExpr_198 = da.pat.FreePattern('u')
PatternExpr_220 = da.pat.ConstantPattern('ACK')
PatternExpr_224 = da.pat.FreePattern('u')
_config_object = {'channel': 'reliable'}

class Agent(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_AgentReceivedEvent_0', PatternExpr_192, sources=[PatternExpr_198], destinations=None, timestamps=None, record_history=None, handlers=[self._Agent_handler_191]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AgentReceivedEvent_1', PatternExpr_220, sources=[PatternExpr_224], destinations=None, timestamps=None, record_history=None, handlers=[self._Agent_handler_219])])

    def setup(self, neighbors, height, isDestination, **rest_474):
        super().setup(neighbors=neighbors, height=height, isDestination=isDestination, **rest_474)
        self._state.neighbors = neighbors
        self._state.height = height
        self._state.isDestination = isDestination
        self._state.msg_counter = 0
        self._state.ack_counter = 0
        self._state.nNeighbors = len(self._state.neighbors)
        self._state.neighborsHeights = []

    def run(self):
        while True:
            for v in self._state.neighbors:
                self.send(('HEIGHT', self._state.height), to=v)
            super()._label('_st_label_251', block=False)
            _st_label_251 = 0
            while (_st_label_251 == 0):
                _st_label_251 += 1
                if (self._state.ack_counter == self._state.nNeighbors):
                    _st_label_251 += 1
                else:
                    super()._label('_st_label_251', block=True)
                    _st_label_251 -= 1
            else:
                if (_st_label_251 != 2):
                    continue
            if (_st_label_251 != 2):
                break
            super()._label('_st_label_260', block=False)
            _st_label_260 = 0
            while (_st_label_260 == 0):
                _st_label_260 += 1
                if (self._state.msg_counter == self._state.nNeighbors):
                    _st_label_260 += 1
                else:
                    super()._label('_st_label_260', block=True)
                    _st_label_260 -= 1
            else:
                if (_st_label_260 != 2):
                    continue
            if (_st_label_260 != 2):
                break
            self.output(f'{self._state.neighborsHeights}')
            self._state.msg_counter = 0
            self._state.ack_counter = 0
            may_reverse = ((not self._state.isDestination) and (self._state.height < min(self._state.neighborsHeights)))
            if may_reverse:
                new_height = (max(self._state.neighborsHeights) + 1)
                self.output(f'new_height = {new_height} prev = {self._state.height} for {self._id}')
                self._state.height = new_height
            self._state.neighborsHeights = []

    def _Agent_handler_191(self, height, u):
        self._state.neighborsHeights.append(height)
        self._state.msg_counter += 1
        self.send('ACK', to=u)
    _Agent_handler_191._labels = None
    _Agent_handler_191._notlabels = None

    def _Agent_handler_219(self, u):
        self._state.ack_counter += 1
    _Agent_handler_219._labels = None
    _Agent_handler_219._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        graph = [[0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0]]
        heights = [5, 4, 2, 0, 3, 6, 1]
        N = len(graph[0])
        agents = list(self.new(Agent, num=N))
        for k in range(N):
            neighbors = [agents[i] for i in range(N) if ((graph[k][i] == 1) or (graph[i][k] == 1))]
            self._setup(agents[k], (neighbors, heights[k], (k == 6)))
        self._start(agents)
