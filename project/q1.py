# -*- generated by 1.0.13 -*-
import da
PatternExpr_184 = da.pat.TuplePattern([da.pat.ConstantPattern('HEIGHT'), da.pat.FreePattern('height')])
PatternExpr_190 = da.pat.FreePattern('sender')
PatternExpr_213 = da.pat.ConstantPattern('ACK')
PatternExpr_217 = da.pat.FreePattern('sender')
_config_object = {}

class Agent(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_AgentReceivedEvent_0', PatternExpr_184, sources=[PatternExpr_190], destinations=None, timestamps=None, record_history=None, handlers=[self._Agent_handler_183]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AgentReceivedEvent_1', PatternExpr_213, sources=[PatternExpr_217], destinations=None, timestamps=None, record_history=None, handlers=[self._Agent_handler_212])])

    def setup(self, neighbours, height, isDest, **rest_470):
        super().setup(neighbours=neighbours, height=height, isDest=isDest, **rest_470)
        self._state.neighbours = neighbours
        self._state.height = height
        self._state.isDest = isDest
        self._state.msg_count = 0
        self._state.ack_count = 0
        self._state.neighbours_height = []

    def run(self):
        while True:
            for v in self._state.neighbours:
                self.send(('HEIGHT', self._state.height), to=v)
            super()._label('_st_label_250', block=False)
            _st_label_250 = 0
            while (_st_label_250 == 0):
                _st_label_250 += 1
                if (self._state.msg_count == len(self._state.neighbours)):
                    _st_label_250 += 1
                else:
                    super()._label('_st_label_250', block=True)
                    _st_label_250 -= 1
            else:
                if (_st_label_250 != 2):
                    continue
            if (_st_label_250 != 2):
                break
            self._state.msg_count = 0
            if ((not self._state.isDest) and (self._state.height < min((self._state.neighbours_height or (self._state.height <= min((self._state.neighbours_height and True))))))):
                self._state.height = (1 + max(self._state.neighbours_height))
            self._state.neighbours_height = []
            for v in self._state.neighbours:
                self.send('ACK', to=v)
            super()._label('_st_label_315', block=False)
            _st_label_315 = 0
            while (_st_label_315 == 0):
                _st_label_315 += 1
                if (self._state.ack_count == len(self._state.neighbours)):
                    _st_label_315 += 1
                else:
                    super()._label('_st_label_315', block=True)
                    _st_label_315 -= 1
            else:
                if (_st_label_315 != 2):
                    continue
            if (_st_label_315 != 2):
                break
            self._state.ack_count = 0

    def _Agent_handler_183(self, height, sender):
        self._state.msg_count += 1
        self.output(f"Received 'reversed' message from {sender}")
        self._state.neighbours_height.append(height)
    _Agent_handler_183._labels = None
    _Agent_handler_183._notlabels = None

    def _Agent_handler_212(self, sender):
        assert (sender in self._state.neighbours)
        self._state.ack_count += 1
    _Agent_handler_212._labels = None
    _Agent_handler_212._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        graph = [[0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0]]
        N = len(graph[0])
        agents = list(self.new(Agent, num=N))
        for k in range(N):
            neighbors_in = [agents[i] for i in range(N) if (graph[k][i] == 1)]
            neighbors_out = [agents[i] for i in range(N) if (graph[i][k] == 1)]
            self._setup(agents[k], (neighbors_out, neighbors_in, (k == 6)))
        self._start(agents)
